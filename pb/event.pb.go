// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.2
// source: def/event.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ViewCountEventType int32

const (
	ViewCountEventType_VIEWCOUNTEVENTTYPE_UNSPECIFIED ViewCountEventType = 0
	ViewCountEventType_VIEWCOUNTEVENTTYPE_INCREASE    ViewCountEventType = 1 //[(event_name) = "INCREASE"]
	ViewCountEventType_VIEWCOUNTEVENTTYPE_DECREASE    ViewCountEventType = 2 //[(event_name) = "DECREASE"]
)

// Enum value maps for ViewCountEventType.
var (
	ViewCountEventType_name = map[int32]string{
		0: "VIEWCOUNTEVENTTYPE_UNSPECIFIED",
		1: "VIEWCOUNTEVENTTYPE_INCREASE",
		2: "VIEWCOUNTEVENTTYPE_DECREASE",
	}
	ViewCountEventType_value = map[string]int32{
		"VIEWCOUNTEVENTTYPE_UNSPECIFIED": 0,
		"VIEWCOUNTEVENTTYPE_INCREASE":    1,
		"VIEWCOUNTEVENTTYPE_DECREASE":    2,
	}
)

func (x ViewCountEventType) Enum() *ViewCountEventType {
	p := new(ViewCountEventType)
	*p = x
	return p
}

func (x ViewCountEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewCountEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_def_event_proto_enumTypes[0].Descriptor()
}

func (ViewCountEventType) Type() protoreflect.EnumType {
	return &file_def_event_proto_enumTypes[0]
}

func (x ViewCountEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewCountEventType.Descriptor instead.
func (ViewCountEventType) EnumDescriptor() ([]byte, []int) {
	return file_def_event_proto_rawDescGZIP(), []int{0}
}

type DBEventType int32

const (
	DBEventType_DBEVENTTYPE_UNSPECIFIED DBEventType = 0
	DBEventType_DBEVENTTYPE_DELETE      DBEventType = 1 //[(event_name) = "DELETE"]
	DBEventType_DBEVENTTYPE_INSERT      DBEventType = 2 //[(event_name) = "INSERT"]
	DBEventType_DBEVENTTYPE_UPDATE      DBEventType = 3 //[(event_name) = "UPDATE"]
)

// Enum value maps for DBEventType.
var (
	DBEventType_name = map[int32]string{
		0: "DBEVENTTYPE_UNSPECIFIED",
		1: "DBEVENTTYPE_DELETE",
		2: "DBEVENTTYPE_INSERT",
		3: "DBEVENTTYPE_UPDATE",
	}
	DBEventType_value = map[string]int32{
		"DBEVENTTYPE_UNSPECIFIED": 0,
		"DBEVENTTYPE_DELETE":      1,
		"DBEVENTTYPE_INSERT":      2,
		"DBEVENTTYPE_UPDATE":      3,
	}
)

func (x DBEventType) Enum() *DBEventType {
	p := new(DBEventType)
	*p = x
	return p
}

func (x DBEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_def_event_proto_enumTypes[1].Descriptor()
}

func (DBEventType) Type() protoreflect.EnumType {
	return &file_def_event_proto_enumTypes[1]
}

func (x DBEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBEventType.Descriptor instead.
func (DBEventType) EnumDescriptor() ([]byte, []int) {
	return file_def_event_proto_rawDescGZIP(), []int{1}
}

type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Author  string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Time    int64  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_def_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_def_event_proto_rawDescGZIP(), []int{0}
}

func (x *Comment) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Comment) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Comment) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type DBChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbEventType DBEventType `protobuf:"varint,1,opt,name=db_event_type,json=dbEventType,proto3,enum=event.DBEventType" json:"db_event_type,omitempty"`
	Comment     *Comment    `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *DBChangeEvent) Reset() {
	*x = DBChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBChangeEvent) ProtoMessage() {}

func (x *DBChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_def_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBChangeEvent.ProtoReflect.Descriptor instead.
func (*DBChangeEvent) Descriptor() ([]byte, []int) {
	return file_def_event_proto_rawDescGZIP(), []int{1}
}

func (x *DBChangeEvent) GetDbEventType() DBEventType {
	if x != nil {
		return x.DbEventType
	}
	return DBEventType_DBEVENTTYPE_UNSPECIFIED
}

func (x *DBChangeEvent) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

type ViewCountEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewCountEventType ViewCountEventType `protobuf:"varint,1,opt,name=view_count_event_type,json=viewCountEventType,proto3,enum=event.ViewCountEventType" json:"view_count_event_type,omitempty"`
	ViewCount          uint32             `protobuf:"varint,2,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
}

func (x *ViewCountEvent) Reset() {
	*x = ViewCountEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewCountEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewCountEvent) ProtoMessage() {}

func (x *ViewCountEvent) ProtoReflect() protoreflect.Message {
	mi := &file_def_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewCountEvent.ProtoReflect.Descriptor instead.
func (*ViewCountEvent) Descriptor() ([]byte, []int) {
	return file_def_event_proto_rawDescGZIP(), []int{2}
}

func (x *ViewCountEvent) GetViewCountEventType() ViewCountEventType {
	if x != nil {
		return x.ViewCountEventType
	}
	return ViewCountEventType_VIEWCOUNTEVENTTYPE_UNSPECIFIED
}

func (x *ViewCountEvent) GetViewCount() uint32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EventOneof:
	//
	//	*Event_DbChangeEvent
	//	*Event_ViewCountEvent
	EventOneof isEvent_EventOneof `protobuf_oneof:"event_oneof"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_def_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_def_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_def_event_proto_rawDescGZIP(), []int{3}
}

func (m *Event) GetEventOneof() isEvent_EventOneof {
	if m != nil {
		return m.EventOneof
	}
	return nil
}

func (x *Event) GetDbChangeEvent() *DBChangeEvent {
	if x, ok := x.GetEventOneof().(*Event_DbChangeEvent); ok {
		return x.DbChangeEvent
	}
	return nil
}

func (x *Event) GetViewCountEvent() *ViewCountEvent {
	if x, ok := x.GetEventOneof().(*Event_ViewCountEvent); ok {
		return x.ViewCountEvent
	}
	return nil
}

type isEvent_EventOneof interface {
	isEvent_EventOneof()
}

type Event_DbChangeEvent struct {
	DbChangeEvent *DBChangeEvent `protobuf:"bytes,1,opt,name=db_change_event,json=dbChangeEvent,proto3,oneof"`
}

type Event_ViewCountEvent struct {
	ViewCountEvent *ViewCountEvent `protobuf:"bytes,2,opt,name=view_count_event,json=viewCountEvent,proto3,oneof"`
}

func (*Event_DbChangeEvent) isEvent_EventOneof() {}

func (*Event_ViewCountEvent) isEvent_EventOneof() {}

var File_def_event_proto protoreflect.FileDescriptor

var file_def_event_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x65, 0x66, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x0d, 0x44, 0x42, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x62,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x42, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x64, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x0a, 0x0e,
	0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c,
	0x0a, 0x15, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0f, 0x64, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x42, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x2a, 0x7a, 0x0a, 0x12, 0x56, 0x69, 0x65, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x56, 0x49, 0x45, 0x57, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x49, 0x45, 0x57, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x49, 0x45, 0x57, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53,
	0x45, 0x10, 0x02, 0x2a, 0x72, 0x0a, 0x0b, 0x44, 0x42, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x42, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x42, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x42, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x42, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x42, 0x05, 0x5a, 0x03, 0x70, 0x62, 0x2f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_def_event_proto_rawDescOnce sync.Once
	file_def_event_proto_rawDescData = file_def_event_proto_rawDesc
)

func file_def_event_proto_rawDescGZIP() []byte {
	file_def_event_proto_rawDescOnce.Do(func() {
		file_def_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_def_event_proto_rawDescData)
	})
	return file_def_event_proto_rawDescData
}

var file_def_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_def_event_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_def_event_proto_goTypes = []interface{}{
	(ViewCountEventType)(0), // 0: event.ViewCountEventType
	(DBEventType)(0),        // 1: event.DBEventType
	(*Comment)(nil),         // 2: event.Comment
	(*DBChangeEvent)(nil),   // 3: event.DBChangeEvent
	(*ViewCountEvent)(nil),  // 4: event.ViewCountEvent
	(*Event)(nil),           // 5: event.Event
}
var file_def_event_proto_depIdxs = []int32{
	1, // 0: event.DBChangeEvent.db_event_type:type_name -> event.DBEventType
	2, // 1: event.DBChangeEvent.comment:type_name -> event.Comment
	0, // 2: event.ViewCountEvent.view_count_event_type:type_name -> event.ViewCountEventType
	3, // 3: event.Event.db_change_event:type_name -> event.DBChangeEvent
	4, // 4: event.Event.view_count_event:type_name -> event.ViewCountEvent
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_def_event_proto_init() }
func file_def_event_proto_init() {
	if File_def_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_def_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewCountEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_def_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_def_event_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Event_DbChangeEvent)(nil),
		(*Event_ViewCountEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_def_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_def_event_proto_goTypes,
		DependencyIndexes: file_def_event_proto_depIdxs,
		EnumInfos:         file_def_event_proto_enumTypes,
		MessageInfos:      file_def_event_proto_msgTypes,
	}.Build()
	File_def_event_proto = out.File
	file_def_event_proto_rawDesc = nil
	file_def_event_proto_goTypes = nil
	file_def_event_proto_depIdxs = nil
}
